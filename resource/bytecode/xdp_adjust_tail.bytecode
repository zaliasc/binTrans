
./xdp_adjust_tail_kern.o:	file format ELF64-BPF


Disassembly of section xdp_icmp:

0000000000000000 _xdp_icmp:
; {
       0:	bf 16 00 00 00 00 00 00	r6 = r1
       1:	b7 07 00 00 01 00 00 00	r7 = 1
; 	void *data_end = (void *)(long)xdp->data_end;
       2:	61 61 04 00 00 00 00 00	r1 = *(u32 *)(r6 + 4)
; 	void *data = (void *)(long)xdp->data;
       3:	61 62 00 00 00 00 00 00	r2 = *(u32 *)(r6 + 0)
; 	if (eth + 1 > data_end)
       4:	bf 23 00 00 00 00 00 00	r3 = r2
       5:	07 03 00 00 0e 00 00 00	r3 += 14
       6:	2d 13 5f 00 00 00 00 00	if r3 > r1 goto +95 <LBB0_9>
; 	h_proto = eth->h_proto;
       7:	71 23 0c 00 00 00 00 00	r3 = *(u8 *)(r2 + 12)
       8:	71 24 0d 00 00 00 00 00	r4 = *(u8 *)(r2 + 13)
       9:	67 04 00 00 08 00 00 00	r4 <<= 8
      10:	4f 34 00 00 00 00 00 00	r4 |= r3
      11:	b7 07 00 00 02 00 00 00	r7 = 2
; 	if (h_proto == htons(ETH_P_IP))
      12:	55 04 59 00 08 00 00 00	if r4 != 8 goto +89 <LBB0_9>
; 	int pckt_size = data_end - data;
      13:	1f 21 00 00 00 00 00 00	r1 -= r2
      14:	67 01 00 00 20 00 00 00	r1 <<= 32
      15:	c7 01 00 00 20 00 00 00	r1 s>>= 32
      16:	b7 02 00 00 59 02 00 00	r2 = 601
; 	if (pckt_size > MAX_PCKT_SIZE) {
      17:	6d 12 54 00 00 00 00 00	if r2 s> r1 goto +84 <LBB0_9>
      18:	b7 02 00 00 62 00 00 00	r2 = 98
; 		if (bpf_xdp_adjust_tail(xdp, 0 - offset))
      19:	1f 12 00 00 00 00 00 00	r2 -= r1
      20:	bf 61 00 00 00 00 00 00	r1 = r6
      21:	85 00 00 00 41 00 00 00	call 65
      22:	67 00 00 00 20 00 00 00	r0 <<= 32
      23:	77 00 00 00 20 00 00 00	r0 >>= 32
      24:	55 00 4d 00 00 00 00 00	if r0 != 0 goto +77 <LBB0_9>
; 	if (bpf_xdp_adjust_head(xdp, 0 - headroom))
      25:	bf 61 00 00 00 00 00 00	r1 = r6
      26:	18 02 00 00 e4 ff ff ff 00 00 00 00 00 00 00 00	r2 = 4294967268 ll
      28:	85 00 00 00 2c 00 00 00	call 44
      29:	67 00 00 00 20 00 00 00	r0 <<= 32
      30:	77 00 00 00 20 00 00 00	r0 >>= 32
      31:	b7 07 00 00 01 00 00 00	r7 = 1
      32:	55 00 45 00 00 00 00 00	if r0 != 0 goto +69 <LBB0_9>
; 	void *data_end = (void *)(long)xdp->data_end;
      33:	61 61 04 00 00 00 00 00	r1 = *(u32 *)(r6 + 4)
; 	void *data = (void *)(long)xdp->data;
      34:	61 66 00 00 00 00 00 00	r6 = *(u32 *)(r6 + 0)
; 	if (data + (ICMP_TOOBIG_SIZE + headroom) > data_end)
      35:	bf 62 00 00 00 00 00 00	r2 = r6
      36:	07 02 00 00 7e 00 00 00	r2 += 126
      37:	b7 07 00 00 01 00 00 00	r7 = 1
      38:	2d 12 3f 00 00 00 00 00	if r2 > r1 goto +63 <LBB0_9>
; 	memcpy(eth->h_source, orig_eth->h_dest, ETH_ALEN);
      39:	bf 61 00 00 00 00 00 00	r1 = r6
      40:	07 01 00 00 06 00 00 00	r1 += 6
; 	orig_eth = data + headroom;
      41:	bf 62 00 00 00 00 00 00	r2 = r6
      42:	07 02 00 00 1c 00 00 00	r2 += 28
; 	memcpy(eth->h_source, orig_eth->h_dest, ETH_ALEN);
      43:	b7 03 00 00 06 00 00 00	r3 = 6
      44:	85 10 00 00 ff ff ff ff	call -1
; 	memcpy(eth->h_dest, orig_eth->h_source, ETH_ALEN);
      45:	bf 67 00 00 00 00 00 00	r7 = r6
      46:	07 07 00 00 22 00 00 00	r7 += 34
      47:	bf 61 00 00 00 00 00 00	r1 = r6
      48:	bf 72 00 00 00 00 00 00	r2 = r7
      49:	b7 03 00 00 06 00 00 00	r3 = 6
      50:	85 10 00 00 ff ff ff ff	call -1
      51:	b7 01 00 00 03 04 00 00	r1 = 1027
; 	icmp_hdr->type = ICMP_DEST_UNREACH;
      52:	63 16 22 00 00 00 00 00	*(u32 *)(r6 + 34) = r1
; 	eth->h_proto = orig_eth->h_proto;
      53:	71 61 29 00 00 00 00 00	r1 = *(u8 *)(r6 + 41)
      54:	73 16 0d 00 00 00 00 00	*(u8 *)(r6 + 13) = r1
      55:	71 61 28 00 00 00 00 00	r1 = *(u8 *)(r6 + 40)
      56:	73 16 0c 00 00 00 00 00	*(u8 *)(r6 + 12) = r1
      57:	b7 01 00 00 02 4a 00 00	r1 = 18946
; 	icmp_hdr->un.frag.mtu = htons(MAX_PCKT_SIZE-sizeof(struct ethhdr));
      58:	6b 16 28 00 00 00 00 00	*(u16 *)(r6 + 40) = r1
      59:	b7 08 00 00 00 00 00 00	r8 = 0
; 	*csum = bpf_csum_diff(0, 0, data_start, data_size, *csum);
      60:	b7 01 00 00 00 00 00 00	r1 = 0
      61:	b7 02 00 00 00 00 00 00	r2 = 0
      62:	bf 73 00 00 00 00 00 00	r3 = r7
      63:	b7 04 00 00 5c 00 00 00	r4 = 92
      64:	b7 05 00 00 00 00 00 00	r5 = 0
      65:	85 00 00 00 1c 00 00 00	call 28
      66:	b7 01 00 00 40 01 00 00	r1 = 320
; 	iph->ttl = DEFAULT_TTL;
      67:	63 16 16 00 00 00 00 00	*(u32 *)(r6 + 22) = r1
      68:	b7 01 00 00 45 00 00 70	r1 = 1879048261
; 	iph->ihl = 5;
      69:	63 16 0e 00 00 00 00 00	*(u32 *)(r6 + 14) = r1
; 	iph->daddr = orig_iph->saddr;
      70:	61 61 36 00 00 00 00 00	r1 = *(u32 *)(r6 + 54)
      71:	63 16 1e 00 00 00 00 00	*(u32 *)(r6 + 30) = r1
; 	iph->saddr = orig_iph->daddr;
      72:	61 61 3a 00 00 00 00 00	r1 = *(u32 *)(r6 + 58)
      73:	63 16 1a 00 00 00 00 00	*(u32 *)(r6 + 26) = r1
; 	return ~((csum & 0xffff) + (csum >> 16));
      74:	bf 01 00 00 00 00 00 00	r1 = r0
      75:	77 01 00 00 10 00 00 00	r1 >>= 16
      76:	0f 01 00 00 00 00 00 00	r1 += r0
; 	icmp_hdr->checksum = csum;
      77:	a7 01 00 00 ff ff ff ff	r1 ^= -1
      78:	6b 16 24 00 00 00 00 00	*(u16 *)(r6 + 36) = r1
; 	iph = data + off;
      79:	bf 63 00 00 00 00 00 00	r3 = r6
      80:	07 03 00 00 0e 00 00 00	r3 += 14
; 	*csum = bpf_csum_diff(0, 0, data_start, data_size, *csum);
      81:	b7 01 00 00 00 00 00 00	r1 = 0
      82:	b7 02 00 00 00 00 00 00	r2 = 0
      83:	b7 04 00 00 14 00 00 00	r4 = 20
      84:	b7 05 00 00 00 00 00 00	r5 = 0
      85:	85 00 00 00 1c 00 00 00	call 28
; 	return ~((csum & 0xffff) + (csum >> 16));
      86:	bf 01 00 00 00 00 00 00	r1 = r0
      87:	77 01 00 00 10 00 00 00	r1 >>= 16
      88:	0f 01 00 00 00 00 00 00	r1 += r0
; 	iph->check = csum;
      89:	a7 01 00 00 ff ff ff ff	r1 ^= -1
      90:	6b 16 18 00 00 00 00 00	*(u16 *)(r6 + 24) = r1
; 	u64 key = 0;
      91:	7b 8a f8 ff 00 00 00 00	*(u64 *)(r10 - 8) = r8
      92:	bf a2 00 00 00 00 00 00	r2 = r10
      93:	07 02 00 00 f8 ff ff ff	r2 += -8
; 	icmp_count = bpf_map_lookup_elem(&icmpcnt, &key);
      94:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      96:	85 00 00 00 01 00 00 00	call 1
; 	if (icmp_count)
      97:	15 00 03 00 00 00 00 00	if r0 == 0 goto +3 <LBB0_8>
; 		*icmp_count += 1;
      98:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
      99:	07 01 00 00 01 00 00 00	r1 += 1
     100:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1

0000000000000328 LBB0_8:
     101:	b7 07 00 00 03 00 00 00	r7 = 3

0000000000000330 LBB0_9:
; }
     102:	bf 70 00 00 00 00 00 00	r0 = r7
     103:	95 00 00 00 00 00 00 00	exit
