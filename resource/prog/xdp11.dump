
xdp11_kern.o:	file format ELF64-BPF


Disassembly of section xdp1:

0000000000000000 xdp_prog1:
; 	void *data_end = (void *)(long)ctx->data_end;
       0:	61 12 04 00 00 00 00 00	r2 = *(u32 *)(r1 + 4)
; 	void *data = (void *)(long)ctx->data;
       1:	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0)
; 	if (data + nh_off > data_end)
       2:	bf 13 00 00 00 00 00 00	r3 = r1
       3:	07 03 00 00 0e 00 00 00	r3 += 14
       4:	2d 23 36 00 00 00 00 00	if r3 > r2 goto +54 <LBB0_20>
; 	h_proto = eth->h_proto;
       5:	71 13 0c 00 00 00 00 00	r3 = *(u8 *)(r1 + 12)
       6:	71 14 0d 00 00 00 00 00	r4 = *(u8 *)(r1 + 13)
       7:	67 04 00 00 08 00 00 00	r4 <<= 8
       8:	4f 34 00 00 00 00 00 00	r4 |= r3
; 	if (h_proto == htons(ETH_P_8021Q) || h_proto == htons(ETH_P_8021AD)) {
       9:	15 04 02 00 88 a8 00 00	if r4 == 43144 goto +2 <LBB0_3>
      10:	b7 03 00 00 0e 00 00 00	r3 = 14
      11:	55 04 05 00 81 00 00 00	if r4 != 129 goto +5 <LBB0_5>

0000000000000060 LBB0_3:
; 		if (data + nh_off > data_end)
      12:	bf 13 00 00 00 00 00 00	r3 = r1
      13:	07 03 00 00 12 00 00 00	r3 += 18
      14:	2d 23 2c 00 00 00 00 00	if r3 > r2 goto +44 <LBB0_20>
      15:	b7 03 00 00 12 00 00 00	r3 = 18
; 		h_proto = vhdr->h_vlan_encapsulated_proto;
      16:	69 14 10 00 00 00 00 00	r4 = *(u16 *)(r1 + 16)

0000000000000088 LBB0_5:
; 	if (h_proto == htons(ETH_P_8021Q) || h_proto == htons(ETH_P_8021AD)) {
      17:	bf 45 00 00 00 00 00 00	r5 = r4
      18:	57 05 00 00 ff ff 00 00	r5 &= 65535
      19:	15 05 01 00 88 a8 00 00	if r5 == 43144 goto +1 <LBB0_7>
      20:	55 05 09 00 81 00 00 00	if r5 != 129 goto +9 <LBB0_9>

00000000000000a8 LBB0_7:
; 		nh_off += sizeof(struct vlan_hdr);
      21:	bf 35 00 00 00 00 00 00	r5 = r3
      22:	07 05 00 00 04 00 00 00	r5 += 4
; 		if (data + nh_off > data_end)
      23:	bf 14 00 00 00 00 00 00	r4 = r1
      24:	0f 54 00 00 00 00 00 00	r4 += r5
      25:	2d 24 21 00 00 00 00 00	if r4 > r2 goto +33 <LBB0_20>
; 		vhdr = data + nh_off;
      26:	bf 14 00 00 00 00 00 00	r4 = r1
      27:	0f 34 00 00 00 00 00 00	r4 += r3
; 		h_proto = vhdr->h_vlan_encapsulated_proto;
      28:	69 44 02 00 00 00 00 00	r4 = *(u16 *)(r4 + 2)
      29:	bf 53 00 00 00 00 00 00	r3 = r5

00000000000000f0 LBB0_9:
; 	if (h_proto == htons(ETH_P_IP))
      30:	57 04 00 00 ff ff 00 00	r4 &= 65535
      31:	15 04 08 00 86 dd 00 00	if r4 == 56710 goto +8 <LBB0_14>
      32:	55 04 0f 00 08 00 00 00	if r4 != 8 goto +15 <LBB0_17>
; 	struct iphdr *iph = data + nh_off;
      33:	0f 31 00 00 00 00 00 00	r1 += r3
      34:	b7 03 00 00 00 00 00 00	r3 = 0
; 	if (iph + 1 > data_end)
      35:	bf 14 00 00 00 00 00 00	r4 = r1
      36:	07 04 00 00 14 00 00 00	r4 += 20
      37:	2d 24 08 00 00 00 00 00	if r4 > r2 goto +8 <LBB0_13>
; 	return iph->protocol;
      38:	71 13 09 00 00 00 00 00	r3 = *(u8 *)(r1 + 9)
      39:	05 00 06 00 00 00 00 00	goto +6 <LBB0_13>

0000000000000140 LBB0_14:
; 	struct ipv6hdr *ip6h = data + nh_off;
      40:	0f 31 00 00 00 00 00 00	r1 += r3
      41:	b7 03 00 00 00 00 00 00	r3 = 0
; 	if (ip6h + 1 > data_end)
      42:	bf 14 00 00 00 00 00 00	r4 = r1
      43:	07 04 00 00 28 00 00 00	r4 += 40
      44:	2d 24 01 00 00 00 00 00	if r4 > r2 goto +1 <LBB0_13>
; 	return ip6h->nexthdr;
      45:	71 13 06 00 00 00 00 00	r3 = *(u8 *)(r1 + 6)

0000000000000170 LBB0_13:
      46:	63 3a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r3
      47:	05 00 02 00 00 00 00 00	goto +2 <LBB0_18>

0000000000000180 LBB0_17:
      48:	b7 01 00 00 00 00 00 00	r1 = 0
; 		ipproto = 0;
      49:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1

0000000000000190 LBB0_18:
      50:	bf a2 00 00 00 00 00 00	r2 = r10
      51:	07 02 00 00 fc ff ff ff	r2 += -4
; 	value = bpf_map_lookup_elem(&rxcnt1, &ipproto);
      52:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      54:	85 00 00 00 01 00 00 00	call 1
; 	if (value)
      55:	15 00 03 00 00 00 00 00	if r0 == 0 goto +3 <LBB0_20>
; 		*value += 1;
      56:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
      57:	07 01 00 00 01 00 00 00	r1 += 1
      58:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1

00000000000001d8 LBB0_20:
; }
      59:	b7 00 00 00 01 00 00 00	r0 = 1
      60:	95 00 00 00 00 00 00 00	exit
