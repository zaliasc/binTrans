
ping_drop.o:	file format ELF64-BPF


Disassembly of section prog:

0000000000000000 ping_drop:
; int ping_drop(struct xdp_md *ctx) {
       0:	b7 00 00 00 02 00 00 00	r0 = 2
;     void *data = (void *)(long)ctx->data;    //报文数据开始处
       1:	61 12 00 00 00 00 00 00	r2 = *(u32 *)(r1 + 0)
;     void *end = (void *)(long)ctx->data_end; //报文数据结束点
       2:	61 11 04 00 00 00 00 00	r1 = *(u32 *)(r1 + 4)
;     if (data > end)             //这个检测有点多余，一个合格驱动会保证
       3:	2d 12 10 00 00 00 00 00	if r2 > r1 goto +16 <LBB0_6>
       4:	bf 23 00 00 00 00 00 00	r3 = r2
       5:	07 03 00 00 0e 00 00 00	r3 += 14
       6:	2d 13 0d 00 00 00 00 00	if r3 > r1 goto +13 <LBB0_6>
;     if ((void *)(iph + 1) > end) //这里的检测也非常重要，原因同上
       7:	bf 23 00 00 00 00 00 00	r3 = r2
       8:	07 03 00 00 22 00 00 00	r3 += 34
;     if (eh->h_proto != __constant_htons(ETH_P_IP)) //不是IP报文，放过
       9:	2d 13 0a 00 00 00 00 00	if r3 > r1 goto +10 <LBB0_6>
      10:	71 21 0d 00 00 00 00 00	r1 = *(u8 *)(r2 + 13)
      11:	67 01 00 00 08 00 00 00	r1 <<= 8
      12:	71 23 0c 00 00 00 00 00	r3 = *(u8 *)(r2 + 12)
      13:	4f 31 00 00 00 00 00 00	r1 |= r3
      14:	57 01 00 00 ff ff 00 00	r1 &= 65535
      15:	55 01 04 00 08 00 00 00	if r1 != 8 goto +4 <LBB0_6>
;     if (iph->protocol == IPPROTO_ICMP) //判断如果是ping报文，丢弃
      16:	71 21 17 00 00 00 00 00	r1 = *(u8 *)(r2 + 23)
      17:	b7 00 00 00 01 00 00 00	r0 = 1
      18:	15 01 01 00 01 00 00 00	if r1 == 1 goto +1 <LBB0_6>
      19:	b7 00 00 00 02 00 00 00	r0 = 2

00000000000000a0 LBB0_6:
; }
      20:	95 00 00 00 00 00 00 00	exit
