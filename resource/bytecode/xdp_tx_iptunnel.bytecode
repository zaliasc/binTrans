
./xdp_tx_iptunnel_kern.o:	file format ELF64-BPF


Disassembly of section xdp_tx_iptunnel:

0000000000000000 _xdp_tx_iptunnel:
; {
       0:	bf 16 00 00 00 00 00 00	r6 = r1
       1:	b7 07 00 00 01 00 00 00	r7 = 1
; 	void *data_end = (void *)(long)xdp->data_end;
       2:	61 61 04 00 00 00 00 00	r1 = *(u32 *)(r6 + 4)
; 	void *data = (void *)(long)xdp->data;
       3:	61 68 00 00 00 00 00 00	r8 = *(u32 *)(r6 + 0)
; 	if (eth + 1 > data_end)
       4:	bf 82 00 00 00 00 00 00	r2 = r8
       5:	07 02 00 00 0e 00 00 00	r2 += 14
       6:	2d 12 27 00 00 00 00 00	if r2 > r1 goto +39 <LBB0_32>
; 	h_proto = eth->h_proto;
       7:	71 83 0c 00 00 00 00 00	r3 = *(u8 *)(r8 + 12)
       8:	71 82 0d 00 00 00 00 00	r2 = *(u8 *)(r8 + 13)
       9:	67 02 00 00 08 00 00 00	r2 <<= 8
      10:	4f 32 00 00 00 00 00 00	r2 |= r3
; 	if (h_proto == htons(ETH_P_IP))
      11:	15 02 12 00 86 dd 00 00	if r2 == 56710 goto +18 <LBB0_18>
      12:	b7 07 00 00 02 00 00 00	r7 = 2
      13:	55 02 20 00 08 00 00 00	if r2 != 8 goto +32 <LBB0_32>
      14:	b7 02 00 00 00 00 00 00	r2 = 0
; 	struct vip vip = {};
      15:	7b 2a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r2
      16:	7b 2a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r2
      17:	7b 2a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r2
; 	if (iph + 1 > data_end)
      18:	bf 83 00 00 00 00 00 00	r3 = r8
      19:	07 03 00 00 22 00 00 00	r3 += 34
      20:	b7 07 00 00 01 00 00 00	r7 = 1
      21:	2d 13 18 00 00 00 00 00	if r3 > r1 goto +24 <LBB0_32>
; 	dport = get_dport(iph + 1, data_end, iph->protocol);
      22:	71 83 17 00 00 00 00 00	r3 = *(u8 *)(r8 + 23)
; 	switch (protocol) {
      23:	15 03 18 00 11 00 00 00	if r3 == 17 goto +24 <LBB0_7>
      24:	55 03 1c 00 06 00 00 00	if r3 != 6 goto +28 <LBB0_9>
; 		if (th + 1 > data_end)
      25:	bf 82 00 00 00 00 00 00	r2 = r8
      26:	07 02 00 00 36 00 00 00	r2 += 54
      27:	b7 07 00 00 01 00 00 00	r7 = 1
      28:	2d 12 11 00 00 00 00 00	if r2 > r1 goto +17 <LBB0_32>
      29:	05 00 16 00 00 00 00 00	goto +22 <LBB0_8>

00000000000000f0 LBB0_18:
      30:	b7 09 00 00 00 00 00 00	r9 = 0
; 	struct vip vip = {};
      31:	7b 9a f0 ff 00 00 00 00	*(u64 *)(r10 - 16) = r9
      32:	7b 9a e8 ff 00 00 00 00	*(u64 *)(r10 - 24) = r9
      33:	7b 9a e0 ff 00 00 00 00	*(u64 *)(r10 - 32) = r9
; 	if (ip6h + 1 > data_end)
      34:	bf 82 00 00 00 00 00 00	r2 = r8
      35:	07 02 00 00 36 00 00 00	r2 += 54
      36:	b7 07 00 00 01 00 00 00	r7 = 1
      37:	2d 12 08 00 00 00 00 00	if r2 > r1 goto +8 <LBB0_32>
; 	dport = get_dport(ip6h + 1, data_end, ip6h->nexthdr);
      38:	71 82 14 00 00 00 00 00	r2 = *(u8 *)(r8 + 20)
; 	switch (protocol) {
      39:	15 02 72 00 11 00 00 00	if r2 == 17 goto +114 <LBB0_22>
      40:	55 02 76 00 06 00 00 00	if r2 != 6 goto +118 <LBB0_24>
; 		if (th + 1 > data_end)
      41:	bf 83 00 00 00 00 00 00	r3 = r8
      42:	07 03 00 00 4a 00 00 00	r3 += 74
      43:	b7 07 00 00 01 00 00 00	r7 = 1
      44:	2d 13 01 00 00 00 00 00	if r3 > r1 goto +1 <LBB0_32>
      45:	05 00 70 00 00 00 00 00	goto +112 <LBB0_23>

0000000000000170 LBB0_32:
; }
      46:	bf 70 00 00 00 00 00 00	r0 = r7
      47:	95 00 00 00 00 00 00 00	exit

0000000000000180 LBB0_7:
; 		if (uh + 1 > data_end)
      48:	bf 82 00 00 00 00 00 00	r2 = r8
      49:	07 02 00 00 2a 00 00 00	r2 += 42
      50:	b7 07 00 00 01 00 00 00	r7 = 1
      51:	2d 12 fa ff 00 00 00 00	if r2 > r1 goto -6 <LBB0_32>

00000000000001a0 LBB0_8:
      52:	69 82 24 00 00 00 00 00	r2 = *(u16 *)(r8 + 36)

00000000000001a8 LBB0_9:
; 	vip.protocol = iph->protocol;
      53:	73 3a f4 ff 00 00 00 00	*(u8 *)(r10 - 12) = r3
      54:	b7 07 00 00 02 00 00 00	r7 = 2
; 	vip.family = AF_INET;
      55:	6b 7a f2 ff 00 00 00 00	*(u16 *)(r10 - 14) = r7
; 	vip.daddr.v4 = iph->daddr;
      56:	61 81 1e 00 00 00 00 00	r1 = *(u32 *)(r8 + 30)
; 	vip.dport = dport;
      57:	6b 2a f0 ff 00 00 00 00	*(u16 *)(r10 - 16) = r2
; 	vip.daddr.v4 = iph->daddr;
      58:	63 1a e0 ff 00 00 00 00	*(u32 *)(r10 - 32) = r1
; 	payload_len = ntohs(iph->tot_len);
      59:	69 88 10 00 00 00 00 00	r8 = *(u16 *)(r8 + 16)
      60:	bf a2 00 00 00 00 00 00	r2 = r10
; 	vip.protocol = iph->protocol;
      61:	07 02 00 00 e0 ff ff ff	r2 += -32
; 	tnl = bpf_map_lookup_elem(&vip2tnl, &vip);
      62:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      64:	85 00 00 00 01 00 00 00	call 1
      65:	bf 09 00 00 00 00 00 00	r9 = r0
; 	if (!tnl || tnl->family != AF_INET)
      66:	15 09 eb ff 00 00 00 00	if r9 == 0 goto -21 <LBB0_32>
      67:	69 91 20 00 00 00 00 00	r1 = *(u16 *)(r9 + 32)
      68:	55 01 e9 ff 02 00 00 00	if r1 != 2 goto -23 <LBB0_32>
; 	if (bpf_xdp_adjust_head(xdp, 0 - (int)sizeof(struct iphdr)))
      69:	bf 61 00 00 00 00 00 00	r1 = r6
      70:	18 02 00 00 ec ff ff ff 00 00 00 00 00 00 00 00	r2 = 4294967276 ll
      72:	85 00 00 00 2c 00 00 00	call 44
      73:	67 00 00 00 20 00 00 00	r0 <<= 32
      74:	77 00 00 00 20 00 00 00	r0 >>= 32
      75:	b7 07 00 00 01 00 00 00	r7 = 1
      76:	55 00 e1 ff 00 00 00 00	if r0 != 0 goto -31 <LBB0_32>
; 	data = (void *)(long)xdp->data;
      77:	61 63 00 00 00 00 00 00	r3 = *(u32 *)(r6 + 0)
; 	data_end = (void *)(long)xdp->data_end;
      78:	61 61 04 00 00 00 00 00	r1 = *(u32 *)(r6 + 4)
; 	if (new_eth + 1 > data_end ||
      79:	bf 32 00 00 00 00 00 00	r2 = r3
      80:	07 02 00 00 0e 00 00 00	r2 += 14
      81:	b7 07 00 00 01 00 00 00	r7 = 1
      82:	2d 12 db ff 00 00 00 00	if r2 > r1 goto -37 <LBB0_32>
; 	    old_eth + 1 > data_end ||
      83:	bf 32 00 00 00 00 00 00	r2 = r3
      84:	07 02 00 00 22 00 00 00	r2 += 34
      85:	b7 07 00 00 01 00 00 00	r7 = 1
      86:	2d 12 d7 ff 00 00 00 00	if r2 > r1 goto -41 <LBB0_32>
      87:	b7 07 00 00 01 00 00 00	r7 = 1
; 	if (new_eth + 1 > data_end ||
      88:	2d 12 d5 ff 00 00 00 00	if r2 > r1 goto -43 <LBB0_32>
      89:	dc 08 00 00 10 00 00 00	r8 = be16 r8
      90:	bf 32 00 00 00 00 00 00	r2 = r3
      91:	07 02 00 00 14 00 00 00	r2 += 20
; 	memcpy(new_eth->h_source, old_eth->h_dest, sizeof(new_eth->h_source));
      92:	bf 31 00 00 00 00 00 00	r1 = r3
      93:	07 01 00 00 06 00 00 00	r1 += 6
      94:	bf 36 00 00 00 00 00 00	r6 = r3
      95:	b7 03 00 00 06 00 00 00	r3 = 6
      96:	85 10 00 00 ff ff ff ff	call -1
; 	memcpy(new_eth->h_dest, tnl->dmac, sizeof(new_eth->h_dest));
      97:	bf 92 00 00 00 00 00 00	r2 = r9
      98:	07 02 00 00 22 00 00 00	r2 += 34
      99:	bf 61 00 00 00 00 00 00	r1 = r6
     100:	b7 03 00 00 06 00 00 00	r3 = 6
     101:	85 10 00 00 ff ff ff ff	call -1
     102:	b7 01 00 00 04 00 00 00	r1 = 4
; 	iph->protocol = IPPROTO_IPIP;
     103:	73 16 17 00 00 00 00 00	*(u8 *)(r6 + 23) = r1
     104:	b7 01 00 00 00 00 00 00	r1 = 0
; 	iph->check = 0;
     105:	6b 16 18 00 00 00 00 00	*(u16 *)(r6 + 24) = r1
; 	iph->frag_off =	0;
     106:	6b 16 14 00 00 00 00 00	*(u16 *)(r6 + 20) = r1
; 	new_eth->h_proto = h_proto;
     107:	73 16 0d 00 00 00 00 00	*(u8 *)(r6 + 13) = r1
     108:	b7 01 00 00 45 00 00 00	r1 = 69
; 	iph->ihl = sizeof(*iph) >> 2;
     109:	6b 16 0e 00 00 00 00 00	*(u16 *)(r6 + 14) = r1
; 	iph->tot_len = htons(payload_len + sizeof(*iph));
     110:	07 08 00 00 14 00 00 00	r8 += 20
     111:	dc 08 00 00 10 00 00 00	r8 = be16 r8
     112:	6b 86 10 00 00 00 00 00	*(u16 *)(r6 + 16) = r8
     113:	b7 02 00 00 08 00 00 00	r2 = 8
; 	new_eth->h_proto = h_proto;
     114:	73 26 0c 00 00 00 00 00	*(u8 *)(r6 + 12) = r2
; 	iph->daddr = tnl->daddr.v4;
     115:	61 91 10 00 00 00 00 00	r1 = *(u32 *)(r9 + 16)
     116:	63 16 1e 00 00 00 00 00	*(u32 *)(r6 + 30) = r1
; 	iph->saddr = tnl->saddr.v4;
     117:	61 93 00 00 00 00 00 00	r3 = *(u32 *)(r9 + 0)
; 	iph->ttl = 8;
     118:	73 26 16 00 00 00 00 00	*(u8 *)(r6 + 22) = r2
; 		csum += *next_iph_u16++;
     119:	69 62 12 00 00 00 00 00	r2 = *(u16 *)(r6 + 18)
     120:	0f 28 00 00 00 00 00 00	r8 += r2
     121:	69 62 16 00 00 00 00 00	r2 = *(u16 *)(r6 + 22)
     122:	0f 28 00 00 00 00 00 00	r8 += r2
     123:	bf 32 00 00 00 00 00 00	r2 = r3
     124:	57 02 00 00 ff ff 00 00	r2 &= 65535
     125:	0f 28 00 00 00 00 00 00	r8 += r2
     126:	bf 32 00 00 00 00 00 00	r2 = r3
     127:	77 02 00 00 10 00 00 00	r2 >>= 16
     128:	0f 28 00 00 00 00 00 00	r8 += r2
; 	iph->saddr = tnl->saddr.v4;
     129:	63 36 1a 00 00 00 00 00	*(u32 *)(r6 + 26) = r3
; 		csum += *next_iph_u16++;
     130:	bf 12 00 00 00 00 00 00	r2 = r1
     131:	57 02 00 00 ff ff 00 00	r2 &= 65535
     132:	0f 28 00 00 00 00 00 00	r8 += r2
     133:	77 01 00 00 10 00 00 00	r1 >>= 16
     134:	0f 18 00 00 00 00 00 00	r8 += r1
     135:	07 08 00 00 45 00 00 00	r8 += 69
; 	iph->check = ~((csum & 0xffff) + (csum >> 16));
     136:	bf 81 00 00 00 00 00 00	r1 = r8
     137:	77 01 00 00 10 00 00 00	r1 >>= 16
     138:	0f 81 00 00 00 00 00 00	r1 += r8
     139:	a7 01 00 00 ff ff ff ff	r1 ^= -1
     140:	6b 16 18 00 00 00 00 00	*(u16 *)(r6 + 24) = r1
; 	count_tx(vip.protocol);
     141:	71 a1 f4 ff 00 00 00 00	r1 = *(u8 *)(r10 - 12)
     142:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
     143:	bf a2 00 00 00 00 00 00	r2 = r10
     144:	07 02 00 00 fc ff ff ff	r2 += -4
; 	rxcnt_count = bpf_map_lookup_elem(&rxcnt, &protocol);
     145:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     147:	85 00 00 00 01 00 00 00	call 1
; 	if (rxcnt_count)
     148:	15 00 03 00 00 00 00 00	if r0 == 0 goto +3 <LBB0_17>
; 		*rxcnt_count += 1;
     149:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
     150:	07 01 00 00 01 00 00 00	r1 += 1
     151:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1

00000000000004c0 LBB0_17:
     152:	b7 07 00 00 03 00 00 00	r7 = 3
     153:	05 00 94 ff 00 00 00 00	goto -108 <LBB0_32>

00000000000004d0 LBB0_22:
; 		if (uh + 1 > data_end)
     154:	bf 83 00 00 00 00 00 00	r3 = r8
     155:	07 03 00 00 3e 00 00 00	r3 += 62
     156:	b7 07 00 00 01 00 00 00	r7 = 1
     157:	2d 13 90 ff 00 00 00 00	if r3 > r1 goto -112 <LBB0_32>

00000000000004f0 LBB0_23:
     158:	69 89 38 00 00 00 00 00	r9 = *(u16 *)(r8 + 56)

00000000000004f8 LBB0_24:
     159:	b7 01 00 00 0a 00 00 00	r1 = 10
; 	vip.family = AF_INET6;
     160:	6b 1a f2 ff 00 00 00 00	*(u16 *)(r10 - 14) = r1
; 	vip.protocol = ip6h->nexthdr;
     161:	73 2a f4 ff 00 00 00 00	*(u8 *)(r10 - 12) = r2
; 	memcpy(vip.daddr.v6, ip6h->daddr.s6_addr32, sizeof(vip.daddr));
     162:	bf 82 00 00 00 00 00 00	r2 = r8
     163:	07 02 00 00 26 00 00 00	r2 += 38
     164:	bf a7 00 00 00 00 00 00	r7 = r10
; 	vip.family = AF_INET6;
     165:	07 07 00 00 e0 ff ff ff	r7 += -32
; 	memcpy(vip.daddr.v6, ip6h->daddr.s6_addr32, sizeof(vip.daddr));
     166:	bf 71 00 00 00 00 00 00	r1 = r7
     167:	b7 03 00 00 10 00 00 00	r3 = 16
     168:	85 10 00 00 ff ff ff ff	call -1
; 	vip.dport = dport;
     169:	6b 9a f0 ff 00 00 00 00	*(u16 *)(r10 - 16) = r9
; 	payload_len = ip6h->payload_len;
     170:	69 89 12 00 00 00 00 00	r9 = *(u16 *)(r8 + 18)
; 	tnl = bpf_map_lookup_elem(&vip2tnl, &vip);
     171:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     173:	bf 72 00 00 00 00 00 00	r2 = r7
     174:	85 00 00 00 01 00 00 00	call 1
     175:	bf 08 00 00 00 00 00 00	r8 = r0
     176:	b7 07 00 00 02 00 00 00	r7 = 2
; 	if (!tnl || tnl->family != AF_INET6)
     177:	15 08 7c ff 00 00 00 00	if r8 == 0 goto -132 <LBB0_32>
     178:	69 81 20 00 00 00 00 00	r1 = *(u16 *)(r8 + 32)
     179:	55 01 7a ff 0a 00 00 00	if r1 != 10 goto -134 <LBB0_32>
; 	if (bpf_xdp_adjust_head(xdp, 0 - (int)sizeof(struct ipv6hdr)))
     180:	bf 61 00 00 00 00 00 00	r1 = r6
     181:	18 02 00 00 d8 ff ff ff 00 00 00 00 00 00 00 00	r2 = 4294967256 ll
     183:	85 00 00 00 2c 00 00 00	call 44
     184:	67 00 00 00 20 00 00 00	r0 <<= 32
     185:	77 00 00 00 20 00 00 00	r0 >>= 32
     186:	b7 07 00 00 01 00 00 00	r7 = 1
     187:	55 00 72 ff 00 00 00 00	if r0 != 0 goto -142 <LBB0_32>
; 	data = (void *)(long)xdp->data;
     188:	61 63 00 00 00 00 00 00	r3 = *(u32 *)(r6 + 0)
; 	data_end = (void *)(long)xdp->data_end;
     189:	61 61 04 00 00 00 00 00	r1 = *(u32 *)(r6 + 4)
; 	if (new_eth + 1 > data_end ||
     190:	bf 32 00 00 00 00 00 00	r2 = r3
     191:	07 02 00 00 0e 00 00 00	r2 += 14
     192:	b7 07 00 00 01 00 00 00	r7 = 1
     193:	2d 12 6c ff 00 00 00 00	if r2 > r1 goto -148 <LBB0_32>
; 	    old_eth + 1 > data_end ||
     194:	bf 32 00 00 00 00 00 00	r2 = r3
     195:	07 02 00 00 36 00 00 00	r2 += 54
     196:	b7 07 00 00 01 00 00 00	r7 = 1
     197:	2d 12 68 ff 00 00 00 00	if r2 > r1 goto -152 <LBB0_32>
     198:	b7 07 00 00 01 00 00 00	r7 = 1
; 	if (new_eth + 1 > data_end ||
     199:	2d 12 66 ff 00 00 00 00	if r2 > r1 goto -154 <LBB0_32>
     200:	bf 32 00 00 00 00 00 00	r2 = r3
     201:	07 02 00 00 28 00 00 00	r2 += 40
; 	memcpy(new_eth->h_source, old_eth->h_dest, sizeof(new_eth->h_source));
     202:	bf 31 00 00 00 00 00 00	r1 = r3
     203:	07 01 00 00 06 00 00 00	r1 += 6
     204:	bf 36 00 00 00 00 00 00	r6 = r3
     205:	b7 03 00 00 06 00 00 00	r3 = 6
     206:	85 10 00 00 ff ff ff ff	call -1
; 	memcpy(new_eth->h_dest, tnl->dmac, sizeof(new_eth->h_dest));
     207:	bf 82 00 00 00 00 00 00	r2 = r8
     208:	07 02 00 00 22 00 00 00	r2 += 34
     209:	bf 61 00 00 00 00 00 00	r1 = r6
     210:	b7 03 00 00 06 00 00 00	r3 = 6
     211:	85 10 00 00 ff ff ff ff	call -1
     212:	b7 01 00 00 dd 00 00 00	r1 = 221
; 	new_eth->h_proto = h_proto;
     213:	73 16 0d 00 00 00 00 00	*(u8 *)(r6 + 13) = r1
     214:	b7 01 00 00 86 00 00 00	r1 = 134
     215:	73 16 0c 00 00 00 00 00	*(u8 *)(r6 + 12) = r1
     216:	b7 01 00 00 60 00 00 00	r1 = 96
; 	ip6h->priority = 0;
     217:	73 16 0e 00 00 00 00 00	*(u8 *)(r6 + 14) = r1
; 	memset(ip6h->flow_lbl, 0, sizeof(ip6h->flow_lbl));
     218:	bf 61 00 00 00 00 00 00	r1 = r6
     219:	07 01 00 00 0f 00 00 00	r1 += 15
     220:	b7 07 00 00 03 00 00 00	r7 = 3
     221:	b7 02 00 00 00 00 00 00	r2 = 0
     222:	b7 03 00 00 03 00 00 00	r3 = 3
     223:	85 10 00 00 ff ff ff ff	call -1
     224:	b7 01 00 00 29 08 00 00	r1 = 2089
; 	ip6h->nexthdr = IPPROTO_IPV6;
     225:	6b 16 14 00 00 00 00 00	*(u16 *)(r6 + 20) = r1
; 	ip6h->payload_len = htons(ntohs(payload_len) + sizeof(*ip6h));
     226:	dc 09 00 00 10 00 00 00	r9 = be16 r9
     227:	07 09 00 00 28 00 00 00	r9 += 40
     228:	dc 09 00 00 10 00 00 00	r9 = be16 r9
     229:	6b 96 12 00 00 00 00 00	*(u16 *)(r6 + 18) = r9
; 	memcpy(ip6h->saddr.s6_addr32, tnl->saddr.v6, sizeof(tnl->saddr.v6));
     230:	bf 61 00 00 00 00 00 00	r1 = r6
     231:	07 01 00 00 16 00 00 00	r1 += 22
     232:	bf 82 00 00 00 00 00 00	r2 = r8
     233:	b7 03 00 00 10 00 00 00	r3 = 16
     234:	85 10 00 00 ff ff ff ff	call -1
; 	memcpy(ip6h->daddr.s6_addr32, tnl->daddr.v6, sizeof(tnl->daddr.v6));
     235:	07 06 00 00 26 00 00 00	r6 += 38
     236:	07 08 00 00 10 00 00 00	r8 += 16
     237:	bf 61 00 00 00 00 00 00	r1 = r6
     238:	bf 82 00 00 00 00 00 00	r2 = r8
     239:	b7 03 00 00 10 00 00 00	r3 = 16
     240:	85 10 00 00 ff ff ff ff	call -1
; 	count_tx(vip.protocol);
     241:	71 a1 f4 ff 00 00 00 00	r1 = *(u8 *)(r10 - 12)
     242:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1
     243:	bf a2 00 00 00 00 00 00	r2 = r10
     244:	07 02 00 00 fc ff ff ff	r2 += -4
; 	rxcnt_count = bpf_map_lookup_elem(&rxcnt, &protocol);
     245:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
     247:	85 00 00 00 01 00 00 00	call 1
; 	if (rxcnt_count)
     248:	15 00 35 ff 00 00 00 00	if r0 == 0 goto -203 <LBB0_32>
; 		*rxcnt_count += 1;
     249:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
     250:	07 01 00 00 01 00 00 00	r1 += 1
     251:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1
     252:	05 00 31 ff 00 00 00 00	goto -207 <LBB0_32>
