
xdp11.o:	file format ELF64-BPF


Disassembly of section xdp11:

0000000000000000 xdp_prog1:
; 	void *data_end = (void *)(long)ctx->data_end;
       0:	61 12 04 00 00 00 00 00	r2 = *(u32 *)(r1 + 4)
; 	void *data = (void *)(long)ctx->data;
       1:	61 11 00 00 00 00 00 00	r1 = *(u32 *)(r1 + 0)
; 	if (data + nh_off > data_end)
       2:	bf 13 00 00 00 00 00 00	r3 = r1
       3:	07 03 00 00 0e 00 00 00	r3 += 14
       4:	2d 23 30 00 00 00 00 00	if r3 > r2 goto +48 <LBB0_19>
; 	h_proto = eth->h_proto;
       5:	71 14 0c 00 00 00 00 00	r4 = *(u8 *)(r1 + 12)
       6:	71 13 0d 00 00 00 00 00	r3 = *(u8 *)(r1 + 13)
       7:	67 03 00 00 08 00 00 00	r3 <<= 8
       8:	4f 43 00 00 00 00 00 00	r3 |= r4
; 	if (h_proto == htons(ETH_P_8021Q) || h_proto == htons(ETH_P_8021AD)) {
       9:	15 03 02 00 88 a8 00 00	if r3 == 43144 goto +2 <LBB0_3>
      10:	b7 04 00 00 0e 00 00 00	r4 = 14
      11:	55 03 0c 00 81 00 00 00	if r3 != 129 goto +12 <LBB0_8>

0000000000000060 LBB0_3:
; 		if (data + nh_off > data_end)
      12:	bf 13 00 00 00 00 00 00	r3 = r1
      13:	07 03 00 00 12 00 00 00	r3 += 18
      14:	2d 23 26 00 00 00 00 00	if r3 > r2 goto +38 <LBB0_19>
; 		h_proto = vhdr->h_vlan_encapsulated_proto;
      15:	69 13 10 00 00 00 00 00	r3 = *(u16 *)(r1 + 16)
; 	if (h_proto == htons(ETH_P_8021Q) || h_proto == htons(ETH_P_8021AD)) {
      16:	15 03 02 00 88 a8 00 00	if r3 == 43144 goto +2 <LBB0_6>
      17:	b7 04 00 00 12 00 00 00	r4 = 18
      18:	55 03 05 00 81 00 00 00	if r3 != 129 goto +5 <LBB0_8>

0000000000000098 LBB0_6:
; 		if (data + nh_off > data_end)
      19:	bf 13 00 00 00 00 00 00	r3 = r1
      20:	07 03 00 00 16 00 00 00	r3 += 22
      21:	2d 23 1f 00 00 00 00 00	if r3 > r2 goto +31 <LBB0_19>
      22:	b7 04 00 00 16 00 00 00	r4 = 22
; 		h_proto = vhdr->h_vlan_encapsulated_proto;
      23:	69 13 14 00 00 00 00 00	r3 = *(u16 *)(r1 + 20)

00000000000000c0 LBB0_8:
; 	if (h_proto == htons(ETH_P_IP))
      24:	57 03 00 00 ff ff 00 00	r3 &= 65535
      25:	15 03 08 00 86 dd 00 00	if r3 == 56710 goto +8 <LBB0_13>
      26:	55 03 0f 00 08 00 00 00	if r3 != 8 goto +15 <LBB0_16>
; 	struct iphdr *iph = data + nh_off;
      27:	0f 41 00 00 00 00 00 00	r1 += r4
      28:	b7 03 00 00 00 00 00 00	r3 = 0
; 	if (iph + 1 > data_end)
      29:	bf 14 00 00 00 00 00 00	r4 = r1
      30:	07 04 00 00 14 00 00 00	r4 += 20
      31:	2d 24 08 00 00 00 00 00	if r4 > r2 goto +8 <LBB0_12>
; 	return iph->protocol;
      32:	71 13 09 00 00 00 00 00	r3 = *(u8 *)(r1 + 9)
      33:	05 00 06 00 00 00 00 00	goto +6 <LBB0_12>

0000000000000110 LBB0_13:
; 	struct ipv6hdr *ip6h = data + nh_off;
      34:	0f 41 00 00 00 00 00 00	r1 += r4
      35:	b7 03 00 00 00 00 00 00	r3 = 0
; 	if (ip6h + 1 > data_end)
      36:	bf 14 00 00 00 00 00 00	r4 = r1
      37:	07 04 00 00 28 00 00 00	r4 += 40
      38:	2d 24 01 00 00 00 00 00	if r4 > r2 goto +1 <LBB0_12>
; 	return ip6h->nexthdr;
      39:	71 13 06 00 00 00 00 00	r3 = *(u8 *)(r1 + 6)

0000000000000140 LBB0_12:
      40:	63 3a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r3
      41:	05 00 02 00 00 00 00 00	goto +2 <LBB0_17>

0000000000000150 LBB0_16:
      42:	b7 01 00 00 00 00 00 00	r1 = 0
; 		ipproto = 0;
      43:	63 1a fc ff 00 00 00 00	*(u32 *)(r10 - 4) = r1

0000000000000160 LBB0_17:
      44:	bf a2 00 00 00 00 00 00	r2 = r10
      45:	07 02 00 00 fc ff ff ff	r2 += -4
; 	value = bpf_map_lookup_elem(&rxcnt3, &ipproto);
      46:	18 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00	r1 = 0 ll
      48:	85 00 00 00 01 00 00 00	call 1
; 	if (value)
      49:	15 00 03 00 00 00 00 00	if r0 == 0 goto +3 <LBB0_19>
; 		*value += 1;
      50:	79 01 00 00 00 00 00 00	r1 = *(u64 *)(r0 + 0)
      51:	07 01 00 00 01 00 00 00	r1 += 1
      52:	7b 10 00 00 00 00 00 00	*(u64 *)(r0 + 0) = r1

00000000000001a8 LBB0_19:
; }
      53:	b7 00 00 00 01 00 00 00	r0 = 1
      54:	95 00 00 00 00 00 00 00	exit
